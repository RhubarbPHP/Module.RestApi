<?php

/*
 *	Copyright 2015 RhubarbPHP
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Rhubarb\RestApi\Resources;

require_once __DIR__ . '/CollectionRestResource.php';

use Rhubarb\Crown\DateTime\RhubarbDateTime;
use Rhubarb\Crown\Logging\Log;
use Rhubarb\RestApi\Exceptions\InsertException;
use Rhubarb\RestApi\Exceptions\RestImplementationException;
use Rhubarb\RestApi\UrlHandlers\RestHandler;
use Rhubarb\Stem\Collections\Collection;
use Rhubarb\Stem\Exceptions\RecordNotFoundException;
use Rhubarb\Stem\Filters\Equals;
use Rhubarb\Stem\Models\Model;
use Rhubarb\Stem\Schema\Relationships\ManyToMany;
use Rhubarb\Stem\Schema\Relationships\OneToMany;
use Rhubarb\Stem\Schema\SolutionSchema;

abstract class ModelCollectionRestResource extends CollectionRestResource
{
    public static $modelToResourceMapping = [];

    public function __construct(RestResource $parentResource = null)
    {
        parent::__construct($parentResource);
    }

    public static function registerModelToResourceMapping($modelName, $resourceClassName)
    {
        self::$modelToResourceMapping[$modelName] = $resourceClassName;
    }

    public static function getRestResourceForModel(Model $model)
    {
        $modelName = $model->getModelName();

        if (!isset(self::$modelToResourceMapping[$modelName])) {
            throw new RestImplementationException("The model $modelName does not have an associated rest resource.");
        }

        $class = self::$modelToResourceMapping[$modelName];

        $resource = new $class();

        if ( $resource instanceof ModelCollectionRestResource ){
            $resource = $resource->getItemResourceForModel($model);
        }

        return $resource;
    }

    public static function getRestResourceForModelName($modelName)
    {
        if (!isset(self::$modelToResourceMapping[$modelName])) {
            return false;
        }

        $class = self::$modelToResourceMapping[$modelName];

        $resource = new $class();

        return $resource;
    }

    public static function clearRestResourceMapping()
    {
        self::$modelToResourceMapping = [];
    }

    /**
     * Override to control the columns returned in HEAD requests
     *
     * @return string[]
     */
    protected function getSummaryColumns()
    {
        $model = $this->getSampleModel();
        return [$model->getLabelColumnName()];
    }

    /**
     * Override to control the columns returned in GET requests
     *
     * @return string[]
     */
    protected function getColumns()
    {
        $model = $this->getSampleModel();

        return $model->PublicPropertyList;
    }

    protected function getSampleModel()
    {
        return SolutionSchema::getModel( $this->getModelName() );
    }

    /**
     * @return \Rhubarb\Stem\Collections\Collection|null
     */
    public function getModelCollection()
    {
        $collection = $this->createModelCollection();

        $this->filterModelCollectionForSecurity($collection);

        return $collection;
    }


    /**
     * Override to filter a model collection to apply any necessary filters only when this is the specific resource being fetched
     *
     * The default handling applies the same filters as filterModelCollectionContainer, so don't call the parent implementation unless you want that.
     *
     * @param Collection $collection
     */
    public function filterModelCollection(Collection $collection)
    {
        $this->filterModelCollectionContainer($collection);
    }

    /**
     * Override to filter a model collection to apply any necessary filters only when this is a REST parent of the specific resource being fetched
     *
     * @param Collection $collection
     */
    public function filterModelCollectionContainer(Collection $collection)
    {
    }

    public function filterModelCollectionForModifiedSince(Collection $collection, RhubarbDateTime $since)
    {
        throw new RestImplementationException("A collection filtered by modified date was requested however this resource does not support it.");
    }

    /**
     * Override to filter a model collection generated by a ModelRestCollection
     *
     * Normally used by root collections to filter based on authentication permissions.
     *
     * @param Collection $collection
     */
    public function filterModelCollectionForSecurity(Collection $collection)
    {

    }


    /**
     * Returns the name of the model to use for this resource.
     *
     * @return string
     */
    public abstract function getModelName();

    protected function createModelCollection()
    {
        // If we have a parent resource we will look to see if we can exploit a relationship
        // to use as our starting collection. This will ensure we only serve the correct
        // resources
        if ($this->parentResource instanceof ModelItemRestResource) {
            // See there is a relationship between these two models that can be exploited
            $parentModelName = $this->parentResource->getModelName();
            $relationships = SolutionSchema::getAllRelationshipsForModel($parentModelName);

            // Our model name
            $modelName = $this->getModelName();

            foreach ($relationships as $relationship) {
                if ($relationship instanceof ManyToMany) {
                    if ($relationship->getRightModelName() == $modelName) {
                        return $relationship->fetchFor($this->parentResource->getModel());
                    }
                }

                if ($relationship instanceof OneToMany) {
                    if ($relationship->getTargetModelName() == $modelName) {
                        return $relationship->fetchFor($this->parentResource->getModel());
                    }
                }
            }
        }

        return new Collection($this->getModelName());
    }

    public function containsResourceIdentifier($resourceIdentifier)
    {
        $collection = clone $this->getModelCollection();

        $this->filterModelCollectionContainer($collection);

        $collection->filter(new Equals($collection->getModelSchema()->uniqueIdentifierColumnName, $resourceIdentifier));

        if (count($collection) > 0) {
            return true;
        }

        return false;
    }

    protected function summarizeItems($from, $to, RhubarbDateTime $since = null)
    {
        return $this->fetchItems($from, $to, $since, true);
    }

    protected function getItems($from, $to, RhubarbDateTime $since = null)
    {
        return $this->fetchItems($from, $to, $since);
    }

    private function fetchItems($from, $to, RhubarbDateTime $since = null, $asSummary = false)
    {
        $collection = $this->getModelCollection();

        Log::performance("Filtering collection", "RESTAPI");

        $this->filterModelCollection($collection);

        if ($since !== null) {
            $this->filterModelCollectionForModifiedSince($collection, $since);
        }

        $pageSize = ($to - $from) + 1;
        $collection->setRange($from, $pageSize);

        $items = [];

        Log::performance("Starting collection iteration", "RESTAPI");

        foreach ($collection as $model) {
            $resource = $this->getItemResourceForModel( $model );

            $modelStructure = ($asSummary) ? $resource->summary() : $resource->get();
            $items[] = $modelStructure;
        }

        return [$items, sizeof($collection)];
    }

    private function getItemResourceForModel( $model )
    {
        $resource = new SimpleModelItemRestResource($model, $this->getColumns(), $this->getSummaryColumns(), $this);
        $resource->setUrlHandler($this->urlHandler);

        return $resource;
    }

    public function post($restResource, RestHandler $handler = null)
    {
        try {
            $newModel = SolutionSchema::getModel($this->getModelName());

            if (is_array($restResource)) {
                $newModel->importData($restResource);
            }

            $newModel->save();

            $this->afterModelCreated($newModel, $restResource);

            return $this->getItemResourceForModel($newModel)->get();
        } catch (RecordNotFoundException $er) {
            throw new InsertException("That record could not be found.");
        } catch (\Exception $er) {
            throw new InsertException($er->getMessage());
        }
    }

    /**
     * Override to respond to the event of a new model being created through a POST
     *
     * @param $model
     * @param $restResource
     */
    protected function afterModelCreated($model, $restResource)
    {

    }

    /**
     * Returns the ItemRestResource for the $resourceIdentifier contained in this collection.
     *
     * @param $resourceIdentifier
     * @return ItemRestResource
     * @throws RestImplementationException Thrown if the item could not be found.
     */
    public function createItemResource($resourceIdentifier)
    {
        $model = SolutionSchema::getModel($this->getModelName(),$resourceIdentifier);

        return $this->getItemResourceForModel($model);
    }
}